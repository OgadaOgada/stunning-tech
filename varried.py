from types import BuiltinFunctionType


mylist = [92,43,56,69,65]
# print(len(mylist))
ind = -1
# right = -1

def reversed(theList):
    theList.reverse()
    return theList

def sorted(theList):
    theList.sort()
    return theList

# print(mylist)
# print("Sorted:",sorted(mylist))
# print("Reversed after sorting:",reversed(sorted(mylist)))

# # reversing by slicing the list
# for i in mylist:
#     newlist = mylist[::-1]
# print("Generated by slicing",newlist)

# newlist = mylist
# print("New list", newlist)

# # getting mid item(s)
# # for i in mylist:
# #     ind += 1

# # if ind % 2 == 0:
# #     midn = int(ind/2)
# #     print(mylist[midn])
# # else:
# #     print("Double mid numbers")
# #     frt = int((ind - 1)/2)
# #     lst = int((ind + 1)/2)
# #     print(str(mylist[frt])+" and "+str(mylist[lst]))

# # print(mylist)
# # mylist[2:3]=[]
# # print(mylist)
# class geeksforgeeks:
#     def __init__(self):
#         self.geek = "Geeks for geeks"
#     def print_geeks(self):
#         print(self.geek)

# obj = geeksforgeeks()
# obj.print_geeks()

x = lambda a: a + 10
print(x(5))
pr = lambda a,b,c:(a*c)/b
print(pr(4,5,10))


class mycar:
    def __init__(self,color,fuel,make,drive): #self can be anything but has to be the first
        self.color = color
        self.fuel = fuel
        self.make = make
        self.drive = drive
    
    def myfunct(self): #self can be anything, not similar to the init 
        print("My car is "+self.make+" and it's "+self.color)
        print("My car is "+self.drive+" driven")
        print("My car uses "+self.fuel)

vits = mycar("blue","diesel","toyota","right")
# print(vits.drive)
vits.myfunct()
vits.color = "grey"
del vits.drive #to delete the drive parameter
del vits #to delete the object
# vits.myfunct()

class person: #parent class
    def __init__(self,fname,lname):
        self.fname = fname
        self.lname = lname
    def funct(self):
        print("\nFirst name ",self.fname,"\nSecond name ", self.lname)

col = person("Collince","Ogada")
col.funct()

#child class
class student(person):
    def __init__(self, fname, lname,year):
        super().__init__(fname, lname)
        self.graduationyear = year
    def welcome(self):
        print("Welcome", self.fname, self.lname, "to the class of", self.graduationyear)
            

s = student("Jane","Doe",2010)
s.welcome()